{"version":3,"sources":["components/map.jsx","components/Recent.js","components/EarthquakeDetails.js","App.js","reportWebVitals.js","index.js"],"names":["Map","compose","withProps","googleMapURL","loadingElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","earthquakeData","setSelected","defaultZoom","defaultCenter","lat","lng","map","earthquake","index","oneHrAgo","moment","subtract","withinHr","time","isAfter","oneDayAgo","withinDay","oneWeekAgo","withinWeek","color","center","radius","magnitude","options","strokeColor","fillColor","fillOpacity","strokeWeight","onClick","Recent","firstEarthquake","timeOfQuake","format","class","backgroundColor","id","marginTop","marginBottom","place","felt","EarthquakeDetails","App","useState","setEarthquakeData","loading","setLoading","selected","fetchData","a","axios","get","response","features","data","filter","properties","mag","earthquakes","feature","tsunami","geometry","coordinates","console","log","useEffect","href","marginLeft","marginRight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42223e22.chunk.js","sourcesContent":["import React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  Circle,\n} from \"react-google-maps\";\nimport moment from \"moment\";\n\nconst Map = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDcxtC06rkmeB52VEzmXhTfdzV0_7SsYhI&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap\n)(({ earthquakeData, setSelected }) => (\n  <GoogleMap\n    defaultZoom={2.5}\n    defaultCenter={{ lat: 40.73061, lng: -73.935242 }}\n  >\n    {earthquakeData.map((earthquake, index) => {\n      // Until map key added the following code is not needed\n\n      const oneHrAgo = moment().subtract(1, \"hours\");\n      const withinHr = moment(earthquake.time).isAfter(oneHrAgo);\n\n      const oneDayAgo = moment().subtract(1, \"days\");\n      const withinDay = moment(earthquake.time).isAfter(oneDayAgo);\n\n      const oneWeekAgo = moment().subtract(7, \"days\");\n      const withinWeek = moment(earthquake.time).isAfter(oneWeekAgo);\n\n      const color = withinHr\n        ? \"red\"\n        : withinDay\n        ? \"yellow\"\n        : withinWeek\n        ? \"blue\"\n        : \"green\"; // 30 days\n\n      return (\n        <Circle\n          key={index}\n          center={{ lat: earthquake.lat, lng: earthquake.lng }}\n          radius={earthquake.magnitude * 50000}\n          options={{\n            strokeColor: color,\n            fillColor: color,\n            fillOpacity: 0.4,\n            strokeWeight: 0,\n          }}\n          onClick={() => setSelected(earthquake)}\n        />\n      );\n    })}\n  </GoogleMap>\n));\n\nexport default Map;\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"bulma/css/bulma.min.css\";\n\nconst Recent = ({ firstEarthquake }) => {\n  const timeOfQuake = moment(firstEarthquake.time).format(\n    \"dddd, MMMM Do YYYY, h:mm:ss a\"\n  );\n\n  return (\n    <div class=\"column\">\n      <div class=\"card level\" style={{ backgroundColor: `#38a3a5` }}>\n        <div class=\"card-content level-item has-text-centered\" id=\"question\">\n          <h1 class=\"title is-4\" style={{ color: `white` }}>\n            Most Recent Earthquake\n          </h1>\n        </div>\n      </div>\n      <footer class=\"card-footer\" style={{ backgroundColor: `#57cc99` }}>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Place - {firstEarthquake.place}</h3>\n        </div>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Magnitude - {firstEarthquake.magnitude}</h3>\n        </div>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Time - {timeOfQuake}</h3>\n        </div>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Was it felt? {firstEarthquake.felt ? \"Yes\" : \"No\"}</h3>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default Recent;\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"bulma/css/bulma.min.css\";\n\nconst EarthquakeDetails = ({ earthquake }) => {\n  const timeOfQuake = moment(earthquake.time).format(\n    \"dddd, MMMM Do YYYY, h:mm:ss a\"\n  );\n\n  return (\n    <div class=\"column\">\n      <div class=\"card level\">\n        <div\n          class=\"card-content level-item has-text-centered\"\n          style={{ backgroundColor: `#38a3a5` }}\n        >\n          <h1 class=\"title is-4\" style={{ color: `white` }}>\n            Earthquake Details\n          </h1>\n        </div>\n      </div>\n      <footer class=\"card-footer\" style={{ backgroundColor: `#57cc99` }}>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Place - {earthquake.place}</h3>\n        </div>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Magnitude - {earthquake.magnitude}</h3>\n        </div>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Time - {timeOfQuake}</h3>\n        </div>\n        <div\n          class=\"card-footer-item\"\n          style={{ marginTop: `50px`, marginBottom: `50px` }}\n        >\n          <h3>Was it felt? {earthquake.felt ? \"Yes\" : \"No\"}</h3>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default EarthquakeDetails;\n","import \"./App.css\";\nimport axios from \"axios\";\nimport \"bulma/css/bulma.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Map from \"./components/map\";\nimport Recent from \"./components/Recent\";\nimport EarthquakeDetails from \"./components/EarthquakeDetails\";\nimport { FaGithub, FaTwitter } from \"react-icons/fa\";\n\nconst App = () => {\n  const [earthquakeData, setEarthquakeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selected, setSelected] = useState(null);\n\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get(\n        \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson\"\n      );\n\n      const features = response.data.features.filter(\n        (earthquake) => earthquake.properties.mag > 0\n      );\n      const earthquakes = features.map((feature) => {\n        return {\n          time: feature.properties.time,\n          place: feature.properties.place,\n          magnitude: feature.properties.mag,\n          tsunami: feature.properties.tsunami,\n          felt: feature.properties.felt,\n          lat: feature.geometry.coordinates[1],\n          lng: feature.geometry.coordinates[0],\n        };\n      });\n      setEarthquakeData(earthquakes);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <section class=\"hero is-small\" style={{ backgroundColor: `#22577a` }}>\n        <div class=\"hero-body has-text-centered\">\n          <p class=\"title is-1\" style={{ color: `#f0f8ff` }}>\n            Global Earthquake Monitor\n          </p>\n        </div>\n      </section>\n\n      <Map earthquakeData={earthquakeData} setSelected={setSelected} />\n      {loading ? (\n        <h1>Loading...</h1>\n      ) : (\n        <>\n          {selected ? (\n            <EarthquakeDetails earthquake={selected} />\n          ) : (\n            <Recent firstEarthquake={earthquakeData[0]} />\n          )}\n        </>\n      )}\n      <footer class=\"footer\" style={{ backgroundColor: `#80ed99` }}>\n        <div class=\"content has-text-centered is-primary\">\n          <p>\n            <strong>Made By Tyler Carroll 2021</strong>\n            <a href=\"https://github.com/Tyler320sc\">\n              <FaGithub\n                style={{\n                  marginLeft: `25px`,\n                  marginRight: `25px`,\n                  color: `black`,\n                }}\n              />\n            </a>\n            <a href=\"https://twitter.com/home\">\n              <FaTwitter\n                style={{\n                  color: `black`,\n                }}\n              />\n            </a>\n          </p>\n        </div>\n      </footer>\n    </>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nreportWebVitals();\n"],"sourceRoot":""}